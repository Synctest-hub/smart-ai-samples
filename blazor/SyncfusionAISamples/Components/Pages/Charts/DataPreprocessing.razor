
@page "/charts/ai-data-preprocessing"

@inject AzureAIService OpenAIService
@inject NavigationManager NavigationManager

@using System.Text;
@using System.Text.Json;
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using System.Collections.ObjectModel

<h4 style="text-align:center;">Data Preprocessing</h4>

<Description>
    <p>The <b>Data Preprocessing</b> sample uses Syncfusion Blazor Charts to clean and visualize datasets containing missing or inconsistent values. With a single click on the AI Assist button, raw data is automatically processed to fill gaps and correct anomalies. The updated dataset is instantly reflected in the chart, offering a complete and accurate view. This smart charting approach enhances data clarity and supports better insights.</p>
    <p>Select a dataset with missing values and click AI Assist to clean and visualize complete data instantly using Blazor Charts. Know more <a target="_blank" href="https://github.com/syncfusion/smart-ai-samples/blob/master/blazor/SyncfusionAISamples/Components/Pages/Charts/Readme.md">here</a></p>
</Description>

<div class="chart-wrapper">
    <SfChart Title="E-Commerce Website Traffic Data"
             SubTitle="AI-powered data cleaning and preprocessing for tracking hourly website visitors" Theme="@Theme">
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"
                           Minimum="new DateTime(2024, 7, 1, 0, 0, 0)"
                           Maximum="new DateTime(2024, 7, 1, 23, 0, 0)"
                           LabelFormat="h tt" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryYAxis Minimum="140" Maximum="320" Interval="30"></ChartPrimaryYAxis>
        <ChartLegendSettings Visible="true" Position="LegendPosition.Top"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartDataCollection" XName="Time" YName="Visitors" Name="Visitors"
                         PointColorMapping="Color" Type="ChartSeriesType.MultiColoredLine">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
    <SfSpinner @bind-Visible="@VisibleProperty" CssClass="chart-spinner-overlay"></SfSpinner>
    <SfButton CssClass="chart-action-button" OnClick="ProcessChartData" IsPrimary="true" IconCss="e-icons e-ai-chat">
    </SfButton>
</div>

<style>
    .chart-wrapper {
        position: relative;
    }

    .chart-action-button {
        position: absolute;
        top: 10px;
        right: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .chart-action-button .e-icons {
            color: white;
            margin-top: 3%;
            margin-bottom: 3%;
        }

    .chart-spinner-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 20;
    }
</style>

@code {
    private bool VisibleProperty { get; set; } = false;
    private Theme Theme { get; set; }
    public ObservableCollection<ChartData> ChartDataCollection { get; set; } = new();

    public class ChartData
    {
        public DateTime Time { get; set; }
        public double? Visitors { get; set; }
        public string? Color { get; set; }
    }

    private List<ChartData> originalList = new List<ChartData>
    {
        new ChartData { Time = new DateTime(2024, 7, 1, 0, 0, 0), Visitors = 150 },
        new ChartData { Time = new DateTime(2024, 7, 1, 1, 0, 0), Visitors = 160 },
        new ChartData { Time = new DateTime(2024, 7, 1, 2, 0, 0), Visitors = 155 },
        new ChartData { Time = new DateTime(2024, 7, 1, 3, 0, 0), Visitors = null },
        new ChartData { Time = new DateTime(2024, 7, 1, 4, 0, 0), Visitors = 170 },
        new ChartData { Time = new DateTime(2024, 7, 1, 5, 0, 0), Visitors = 175 },
        new ChartData { Time = new DateTime(2024, 7, 1, 6, 0, 0), Visitors = 145 },
        new ChartData { Time = new DateTime(2024, 7, 1, 7, 0, 0), Visitors = 180 },
        new ChartData { Time = new DateTime(2024, 7, 1, 8, 0, 0), Visitors = null },
        new ChartData { Time = new DateTime(2024, 7, 1, 9, 0, 0), Visitors = 185 },
        new ChartData { Time = new DateTime(2024, 7, 1, 10, 0, 0), Visitors = 200 },
        new ChartData { Time = new DateTime(2024, 7, 1, 11, 0, 0), Visitors = null },
        new ChartData { Time = new DateTime(2024, 7, 1, 12, 0, 0), Visitors = 220 },
        new ChartData { Time = new DateTime(2024, 7, 1, 13, 0, 0), Visitors = 230 },
        new ChartData { Time = new DateTime(2024, 7, 1, 14, 0, 0), Visitors = null },
        new ChartData { Time = new DateTime(2024, 7, 1, 15, 0, 0), Visitors = 250 },
        new ChartData { Time = new DateTime(2024, 7, 1, 16, 0, 0), Visitors = 260 },
        new ChartData { Time = new DateTime(2024, 7, 1, 17, 0, 0), Visitors = 270 },
        new ChartData { Time = new DateTime(2024, 7, 1, 18, 0, 0), Visitors = null },
        new ChartData { Time = new DateTime(2024, 7, 1, 19, 0, 0), Visitors = 280 },
        new ChartData { Time = new DateTime(2024, 7, 1, 20, 0, 0), Visitors = 250 },
        new ChartData { Time = new DateTime(2024, 7, 1, 21, 0, 0), Visitors = 290 },
        new ChartData { Time = new DateTime(2024, 7, 1, 22, 0, 0), Visitors = 300 },
        new ChartData { Time = new DateTime(2024, 7, 1, 23, 0, 0), Visitors = null },
    };

    protected override void OnInitialized()
    {
        LoadOriginalData();
    }

    private void LoadOriginalData()
    {
        ChartDataCollection.Clear();
        foreach (ChartData? item in originalList)
        {
            ChartDataCollection.Add(item);
        }
    }

    private async Task ProcessChartData()
    {
        VisibleProperty = true;
        string prompt = GeneratePrompt(originalList);
        string response = await OpenAIService.GetCompletionAsync(prompt, false);
        List<ChartData> processedData = ConvertAIResponseToChartData(response, originalList);
        if (processedData.Count != 0)
        {
            ChartDataCollection.Clear();
            foreach (ChartData item in processedData)
            {
                ChartDataCollection.Add(item);
            }
        }
        VisibleProperty = false;
    }

    private string GeneratePrompt(List<ChartData> data)
    {
        StringBuilder? prompt = new StringBuilder("Clean the following e-commerce website traffic data, resolve outliers and fill missing values:\n");
        foreach (ChartData d in data)
        {
            prompt.AppendLine($"{d.Time:yyyy-MM-dd-HH-m-ss}: {d.Visitors}");
        }
        prompt.AppendLine("and the output cleaned data should be in the yyyy-MM-dd-HH-m-ss:Value format, no other explanation required");
        return prompt.ToString();
    }

    private List<ChartData> ConvertAIResponseToChartData(string response, List<ChartData> original)
    {
        string[]? lines = response.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        List<ChartData>? result = new List<ChartData>();
        int count = 0;
        foreach (string? line in lines)
        {
            string[]? parts = line.Split(':');
            if (parts.Length == 2 &&
                DateTime.TryParseExact(parts[0].Trim(), "yyyy-MM-dd-HH-m-ss", null, System.Globalization.DateTimeStyles.None, out var date) &&
                double.TryParse(parts[1].Trim(), out var visitors))
            {
                bool isCurrNull = original.ElementAtOrDefault(count)?.Visitors == null;
                bool isNextNull = original.ElementAtOrDefault(count + 1)?.Visitors == null;
                string? color = (isCurrNull || isNextNull) ? "#D84227" : null;
                result.Add(new ChartData
                    {
                        Time = date,
                        Visitors = visitors,
                        Color = color
                    });
                count++;
            }
        }
        return result;
    }
}
